name: CI/CD Pipeline

on:
  push:
    branches:
      - main # This workflow runs when code is pushed to the 'main' branch

env:
  DOCKER_IMAGE_NAME: rikikuswo20/express-mongodb # e.g., myuser/my-node-app
  DOCKER_IMAGE_TAG: latest
  VPS_IP: 103.161.184.47 # Your VPS IP address
  VPS_USERNAME: root # e.g., root or ubuntu

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # The GitHub Actions runner OS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.VPS_IP }}
        username: ${{ env.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # SSH into VPS, then execute these commands
          echo "Pulling new Docker image..."
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

          echo "Stopping old container (if running)..."
          # Stop and remove existing container to avoid conflicts
          docker stop express-mongodb-container || true # '|| true' prevents error if container not found
          docker rm express-mongodb-container || true

          echo "Starting new container..."
          # Start the new container. Make sure port mapping is correct.
          # Replace 80:3001 with your actual port mapping (e.g., 80:8000 if app is on 8000)
          docker run -d --name express-mongodb-container -p 3001:3001 ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

          echo "Deployment complete!"
          docker ps